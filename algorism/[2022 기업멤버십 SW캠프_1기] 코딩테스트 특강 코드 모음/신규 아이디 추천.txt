https://school.programmers.co.kr/learn/courses/30/lessons/72410

import re

def solution(new_id):
    #print(dir(new_id))
    '''
    print("0: " + new_id)
    
    # 1단계 소문자로 치환
    new_id = new_id.lower()
    print("1: " + new_id)
    
    # 2단계 알파벳 소문자, 숫자, -, _, . 를 제외한 모든 문자 제거
    refined_id = ""
    for c in new_id:
        if c.isalpha() or c.isdigit() or c in ['-', '_', '.']:
            refined_id += c
    new_id = refined_id
    print("2: " + new_id)
    
    # 3단계 연속된 마침표를 하나의 마침표로 변경
    while ".." in new_id:
        new_id = new_id.replace("..", ".")
    print("3: " + new_id)
    
    # 4단계 마침표가 처음이나 끝 위치에 있다면 제거 합니다.
    if 0 < len(new_id) and new_id[0] == '.':
        new_id = new_id[1:]
    if 0 < len(new_id) and new_id[-1] == '.':
        new_id = new_id[0:-1]
    print("4: " + new_id)
    
    # 5단계 빈 문자열이라면 "a"를 대입합니다.
    if new_id == "":
        new_id = "a"
    print("5: " + new_id)
    
    # 6단계 길이가 16자 이상이면, 15자 문자 까지 유지
    # 6단계 제거 후 마지막 문자가 마침표인 경우 마지막 문자 제거
    if 15 < len(new_id):
        new_id = new_id[0:15]
        if new_id[-1] == ".":
            new_id = new_id[0:-1]
    print("6: " + new_id)
    
    # 7단계 생성된 ID가 2자 이하라면, 길이가 3이 될때까지 반복해서 마지막 문자를 반복합니다.
    while len(new_id) < 3:
        new_id += new_id[-1]
    print("7: " + new_id)
    
    '''
    ############################################
    # 1단계 소문자로 치환
    new_id = new_id.lower()
    print("1: " + new_id)
    
    # 2단계 알파벳 소문자, 숫자, -, _, . 를 제외한 모든 문자 제거
    new_id = re.sub('[^a-z0-9\-_\.]', '', new_id)
    print("2: " + new_id)
    
    # 3단계 연속된 마침표를 하나의 마침표로 변경
    new_id = re.sub('\.+', '.', new_id)
    print("3: " + new_id)
    
    # 4단계 마침표가 처음이나 끝 위치에 있다면 제거 합니다.
    new_id = re.sub('^\.|\.$', '', new_id)
    print("4: " + new_id)
    
    # 5단계 빈 문자열이라면 "a"를 대입합니다.
    if new_id == "":
        new_id = "a"
    print("5: " + new_id)
    
    # 6단계 길이가 16자 이상이면, 15자 문자 까지 유지
    # 6단계 제거 후 마지막 문자가 마침표인 경우 마지막 문자 제거
    if 15 < len(new_id):
        new_id = new_id[0:15]
        new_id = re.sub("\.$", "", new_id)
    print("6: " + new_id)
    
    # 7단계 생성된 ID가 2자 이하라면, 길이가 3이 될때까지 반복해서 마지막 문자를 반복합니다.
    while len(new_id) < 3:
        new_id += new_id[-1]
    
    answer = new_id
    return answer